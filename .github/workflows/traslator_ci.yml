name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]

env:
  DATABASE_URL: postgresql://translator_user:translator_password@localhost:5432/translator_db
  PORT: 8080
  RUST_LOG: info

jobs:
  # Code Quality & Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Rust Code Analysis
        run: |
          cd backend
          cargo fmt -- --check
          cargo clippy -- -D warnings
          cargo check

      - name: Flutter Code Analysis
        run: |
          flutter pub get
          flutter analyze
          flutter test

  # Database Setup & Testing
  database-test:
    name: Database Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: translator_db
          POSTGRES_USER: translator_user
          POSTGRES_PASSWORD: translator_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Setup Database Schema
        run: |
          cd backend
          export DATABASE_URL="postgresql://translator_user:translator_password@localhost:5432/translator_db"
          # Create database schema if needed
          psql $DATABASE_URL -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

      - name: Test Backend API
        run: |
          cd backend
          export DATABASE_URL="postgresql://translator_user:translator_password@localhost:5432/translator_db"
          export PORT=8080
          export RUST_LOG=info
          
          # Start backend in background
          cargo run &
          BACKEND_PID=$!
          
          # Wait for backend to start
          sleep 10
          
          # Test API endpoints
          curl -f http://localhost:8080/api/v1/languages || exit 1
          curl -f http://localhost:8080/api/v1/vocabulary || exit 1
          curl -f http://localhost:8080/api/v1/learning-tips || exit 1
          
          # Stop backend
          kill $BACKEND_PID

  # Backend Build & Test
  backend-test:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: translator_db
          POSTGRES_USER: translator_user
          POSTGRES_PASSWORD: translator_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build Backend
        run: |
          cd backend
          cargo build --release

      - name: Run Backend Tests
        run: |
          cd backend
          export DATABASE_URL="postgresql://translator_user:translator_password@localhost:5432/translator_db"
          cargo test

      - name: Backend Performance Test
        run: |
          cd backend
          export DATABASE_URL="postgresql://translator_user:translator_password@localhost:5432/translator_db"
          export PORT=8080
          export RUST_LOG=info
          
          # Start backend
          cargo run &
          BACKEND_PID=$!
          sleep 10
          
          # Performance test
          for i in {1..10}; do
            curl -s http://localhost:8080/api/v1/languages > /dev/null
          done
          
          kill $BACKEND_PID

  # Frontend Build & Test
  frontend-test:
    name: Frontend Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Install Dependencies
        run: flutter pub get

      - name: Run Flutter Tests
        run: flutter test

      - name: Build APK
        run: flutter build apk --release

      - name: Build Web
        run: flutter build web --release

  # Integration Tests
  integration-test:
    name: Full Stack Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: translator_db
          POSTGRES_USER: translator_user
          POSTGRES_PASSWORD: translator_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Build Backend
        run: |
          cd backend
          cargo build --release

      - name: Integration Test
        run: |
          cd backend
          export DATABASE_URL="postgresql://translator_user:translator_password@localhost:5432/translator_db"
          export PORT=8080
          export RUST_LOG=info
          
          # Start backend
          cargo run &
          BACKEND_PID=$!
          sleep 15
          
          # Test API endpoints
          echo "Testing Languages API..."
          curl -f http://localhost:8080/api/v1/languages | jq '.[0]' || exit 1
          
          echo "Testing Vocabulary API..."
          curl -f http://localhost:8080/api/v1/vocabulary | jq '.[0]' || exit 1
          
          echo "Testing Learning Tips API..."
          curl -f http://localhost:8080/api/v1/learning-tips | jq '.[0]' || exit 1
          
          echo "Testing Search API..."
          curl -f "http://localhost:8080/api/v1/vocabulary/search?q=hello" | jq '.[0]' || exit 1
          
          # Test Flutter frontend
          cd ..
          flutter pub get
          flutter test
          
          # Stop backend
          kill $BACKEND_PID

  # Deployment Readiness
  deployment-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [code-quality, database-test, backend-test, frontend-test, integration-test]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Build Production Backend
        run: |
          cd backend
          cargo build --release
          ls -la target/release/translator-backend

      - name: Build Production Frontend
        run: |
          flutter build web --release
          ls -la build/web

      - name: Generate Deployment Report
        run: |
          echo "## Deployment Readiness Report" > deployment-report.md
          echo "" >> deployment-report.md
          echo "### All Tests Passed" >> deployment-report.md
          echo "- Code Quality:" >> deployment-report.md
          echo "- Database Integration:" >> deployment-report.md
          echo "- Backend Build:" >> deployment-report.md
          echo "- Frontend Build:" >> deployment-report.md
          echo "- Integration Tests:" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "### Production Builds Ready" >> deployment-report.md
          echo "- Backend Binary: \`target/release/translator-backend\`" >> deployment-report.md
          echo "- Frontend Web: \`build/web/\`" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "### Ready for Deployment!" >> deployment-report.md

      - name: Upload Deployment Report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Rust Security Audit
        run: |
          cd backend
          cargo audit

      - name: Flutter Security Check
        run: |
          flutter pub get
          flutter pub deps

  # Performance Benchmark
  performance-test:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: translator_db
          POSTGRES_USER: translator_user
          POSTGRES_PASSWORD: translator_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Performance Benchmark
        run: |
          cd backend
          export DATABASE_URL="postgresql://translator_user:translator_password@localhost:5432/translator_db"
          export PORT=8080
          export RUST_LOG=info
          
          # Start backend
          cargo run &
          BACKEND_PID=$!
          sleep 15
          
          # Benchmark API response times
          echo "Benchmarking API response times..."
          for endpoint in "languages" "vocabulary" "learning-tips"; do
            echo "Testing /api/v1/$endpoint"
            time curl -s http://localhost:8080/api/v1/$endpoint > /dev/null
          done
          
          # Load test
          echo "Running load test..."
          for i in {1..100}; do
            curl -s http://localhost:8080/api/v1/languages > /dev/null &
          done
          wait
          
          kill $BACKEND_PID
