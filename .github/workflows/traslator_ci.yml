name: CI / CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  FLUTTER_VERSION: '3.24.0'

jobs:
  quality-and-test:
    name: Code Quality & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: flutter-pub-cache
          cache-path: ${{ github.workspace }}/.pub-cache

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/

  # Job 2: Build Android APK/AAB
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: quality-and-test
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Generate build version
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M)
          echo "BUILD_VERSION=$TIMESTAMP" >> $GITHUB_ENV
          echo "BUILD_NAME=1.0.0" >> $GITHUB_ENV

      - name: Build APK
        run: |
          flutter build apk --release \
            --build-name=$BUILD_NAME \
            --build-number=$BUILD_VERSION \
            --dart-define=APP_ENV=production

      - name: Build AAB
        run: |
          flutter build appbundle --release \
            --build-name=$BUILD_NAME \
            --build-number=$BUILD_VERSION \
            --dart-define=APP_ENV=production

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-translator-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-translator-aab
          path: build/app/outputs/bundle/release/app-release.aab

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: quality-and-test
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'

      - name: Install CocoaPods
        run: |
          cd ios
          gem install cocoapods
          pod install

      - name: Generate iOS build version
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M)
          echo "BUILD_VERSION=1.0.$TIMESTAMP" >> $GITHUB_ENV
          echo "BUILD_NAME=1.0.0" >> $GITHUB_ENV

      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign \
            --build-name=$BUILD_NAME \
            --build-number=$BUILD_VERSION \
            --dart-define=APP_ENV=production

      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-translator-ios
          path: build/ios/iphoneos/Runner.app

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download APK artifact
        uses: actions/download-artifact@v3
        with:
          name: flutter-translator-apk
          path: ./artifacts

      - name: Download AAB artifact
        uses: actions/download-artifact@v3
        with:
          name: flutter-translator-aab
          path: ./artifacts

      - name: Download iOS artifact
        uses: actions/download-artifact@v3
        with:
          name: flutter-translator-ios
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/app-release.apk
            artifacts/app-release.aab
            artifacts/Runner.app
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-android:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    needs: build-android
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download APK artifact
        uses: actions/download-artifact@v3
        with:
          name: flutter-translator-apk
          path: ./artifacts

      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: testers
          file: artifacts/app-release.apk

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install dependencies
        run: flutter pub get

      - name: Run security analysis
        run: flutter pub audit

      - name: Check for secrets
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml

  size-analysis:
    name: Size Analysis
    runs-on: ubuntu-latest
    needs: build-android

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download APK artifact
        uses: actions/download-artifact@v3
        with:
          name: flutter-translator-apk
          path: ./artifacts

      - name: Analyze APK size
        run: |
          sudo apt-get install -y aapt
          aapt dump badging artifacts/app-release.apk | grep package
          du -h artifacts/app-release.apk