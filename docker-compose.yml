version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: translator_postgres
    environment:
      POSTGRES_DB: translator_db
      POSTGRES_USER: translator_user
      POSTGRES_PASSWORD: translator_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U translator_user -d translator_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: translator_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Rust Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: translator_backend
    environment:
      DATABASE_URL: postgresql://translator_user:translator_password@postgres:5432/translator_db
      REDIS_URL: redis://redis:6379
      PORT: 8080
      RUST_LOG: info
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flutter Web App (development)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: translator_frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - .:/app
      - /app/build
    environment:
      - API_BASE_URL=http://localhost:8080/api/v1

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: translator_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: translator_network
